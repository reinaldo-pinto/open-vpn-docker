---

# This task will create the VPC

- name: "Create VPN VPC"
  ec2_vpc_net:
    name: "{{ aws.vpc_name }}"
    cidr_block: "{{ aws.vpc_cidr_block }}"
    region: "{{ aws.aws_region }}"
    tags:
        name: "{{ aws.vpc_name }}"
    state: "present"
  register: my_vpc

# ############################

# This task will create the Internt Gateway

- name: "Create Internet Gateway for VPC"
  ec2_vpc_igw:
    vpc_id: "{{ my_vpc.vpc.id  }}"
    region: "{{ aws.aws_region }}"
    state: "present"
  register: my_vpc_igw

# ############################

# ############################



# ############################

- name:               Set VPC ID in variable
  set_fact:
    vpc_id:           "{{ my_vpc.vpc.id }}"

# ############################

- name: "Create Public Subnet B"
  ec2_vpc_subnet:
    vpc_id: "{{ my_vpc.vpc.id }}"
    cidr: "{{ aws.public_subnet_1_cidr }}"
    az: "{{ aws.aws_region }}b"
    region: "{{ aws.aws_region }}"
    map_public: yes
    resource_tags:
      Name: "subnet_{{ aws.enviroment_name }}_public_b"
    state: "present"
  register: my_public_subnet_b

# ############################

- name: "Create Public Subnet C"
  ec2_vpc_subnet:
    vpc_id: "{{ my_vpc.vpc.id }}"
    cidr: "{{ aws.public_subnet_2_cidr }}"
    az: "{{ aws.aws_region }}c"
    region: "{{ aws.aws_region }}"
    map_public: yes
    resource_tags:
      Name: "subnet_{{ aws.enviroment_name }}_public_c"
    state: "present"
  register: my_public_subnet_c

# ############################

- name: "Create Private Subnet B"
  ec2_vpc_subnet:
    vpc_id: "{{ my_vpc.vpc.id }}"
    cidr: "{{ aws.private_subnet_1_cidr }}"
    az: "{{ aws.aws_region }}b"
    region: "{{ aws.aws_region }}"
    map_public: no
    resource_tags:
      Name: "subnet_{{ aws.enviroment_name }}_private_b"
    state: "present"
  register: my_private_subnet_b

# ############################

- name: "Create Private Subnet C"
  ec2_vpc_subnet:
    vpc_id: "{{ my_vpc.vpc.id }}"
    cidr: "{{ aws.private_subnet_2_cidr }}"
    az: "{{ aws.aws_region }}c"
    region: "{{ aws.aws_region }}"
    map_public: no
    resource_tags:
      Name: "subnet_{{ aws.enviroment_name }}_private_c"
    state: "present"
  register: my_private_subnet_c

# ############################

# - name:               Set Public Subnet ID in variable
#   set_fact:
#     public_subnet_id: "{{ my_public_subnet.subnet.id }}"

# ############################

- name:               Set Internet Gateway ID in variable
  set_fact:
    igw_id:           "{{ my_vpc_igw.gateway_id }}"

# ############################

- name: "Create Nat Gateway for Subnet B"
  ec2_vpc_nat_gateway:
    subnet_id: "{{ my_public_subnet_b.subnet.id }}"
    wait: yes
    region: "{{ aws.aws_region }}"
    if_exist_do_not_create: true
    state: present
  register: nat_gateway_subnet_b

# ############################

- name: "Create Nat Gateway for Subnet C"
  ec2_vpc_nat_gateway:
    subnet_id: "{{ my_public_subnet_c.subnet.id }}"
    wait: yes
    region: "{{ aws.aws_region }}"
    if_exist_do_not_create: true
    state: present
  register: nat_gateway_subnet_c

# ############################

- name: "Create Public Subnet Route Table"
  ec2_vpc_route_table:
    vpc_id: "{{ my_vpc.vpc.id }}"
    region: "{{ aws.aws_region }}"
    tags:
      Name: "route_table_{{ aws.enviroment_name }}_igw"
    subnets:
      - "{{ my_public_subnet_b.subnet.id }}"
      - "{{ my_public_subnet_c.subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ my_vpc_igw.gateway_id }}"
  register: public_route_table

# ############################

- name: "Create NAT-protected route table"
  ec2_vpc_route_table:
    vpc_id: "{{ my_vpc.vpc.id }}"
    region: "{{ aws.aws_region }}"
    tags:
      Name: "route_table_{{ aws.enviroment_name }}_nat_b"
    subnets:
      - "{{ my_private_subnet_b.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ nat_gateway_subnet_b.nat_gateway_id }}"
  register: nat_route_table_subnet_b

# ############################

- name: "Create NAT-protected route table"
  ec2_vpc_route_table:
    vpc_id: "{{ my_vpc.vpc.id }}"
    region: "{{ aws.aws_region }}"
    tags:
      Name: "route_table_{{ aws.enviroment_name }}_nat_c"
    subnets:
      - "{{ my_private_subnet_c.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ nat_gateway_subnet_c.nat_gateway_id }}"
  register: nat_route_table_subnet_c


- name: AWS | Create SG
  ec2_group:
    name: "sg{{ aws.enviroment_name }}"
    description: "sg{{ aws.enviroment_name }}"
    state: present
    vpc_id: "{{ my_vpc.vpc.id }}"
    region: "{{ aws.aws_region }}"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: "{{ aws.my_ip }}"
      - proto: udp
        ports:
          - 1194
        cidr_ip: "0.0.0.0/0"
    tags:
      Name: "{{ aws.enviroment_name }}"         
  register: sg

- name: AWS | Launch instance
  ec2:
    key_name: "{{ aws.key_pair }}"
    image: "{{ aws.image }}"
    wait: yes
    type: "{{ aws.type }}"
    count: 1
    id: "OPENVPN01"
    group_id: "{{ sg.group_id }}"
    vpc_subnet_id: "{{ my_public_subnet_c.subnet.id }}"
    assign_public_ip: yes
    region: "{{ aws.aws_region }}"
    instance_tags:
      Name: "{{ aws.instance_name }}"
    volumes:
    - device_name: /dev/xvda        
      device_type: gp2
      volume_size: 15
      delete_on_termination: true  
    state: present 
  register: machine   


- name: AWS | Service ssh up OpenVPN
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    timeout: 600
    state: started
  with_items: "{{ machine.instances }}"


- name: AWS | Attach volume
  ec2_vol:
    name: "{{ aws.enviroment_name }}"
    device_name: /dev/sdf
    volume_type: gp2
    delete_on_termination: no
    instance: "{{ item.id }}"
    volume_size: 60
    region: "{{ aws.aws_region }}"
  with_items: "{{ machine.instances }}"
  register: vol
  
- name: AWS | Add instance for host
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: docker
  with_items: "{{ machine.instances }}"